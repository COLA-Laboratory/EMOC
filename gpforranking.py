import numpy as np
import os
import sys
import ctypes
sys.path.insert(0, './gp_pref_elicit')
# sys.path.insert(0, '..')
from gp_pref_elicit.gp_utilities import utils_experiment,utils_parameters

def ranking(obj_num,seed,query_type,num_queries, input_domain):
    # print("start\n")
    noise=1e-6
    # print(input_domain)

    params = utils_parameters.get_parameter_dict(query_type=query_type, utility_noise=noise, num_objectives=obj_num)
    params["num queries"] = num_queries
    params["seed"] = seed

    experiment = utils_experiment.Experiment(params,input_domain)
    result = experiment.run(recalculate=True)

    input_domain = result[1]
    # print(input_domain)
    order_index = np.argsort(-input_domain[:, 0])
    true_utility = result[2]
    gp_mean = result[3]
    # print(gp_mean)
    gp_mean = (gp_mean - np.min(gp_mean)) / (np.max(gp_mean) - np.min(gp_mean))
    gp_var = result[4]
    datapoints = result[5]
    utility_datapoints = result[6]

    best_index = np.argmax(gp_mean)       #给出utility function最大值的索引值
    reco_index=np.argsort(-gp_mean)[0:10]  #给出10个最佳的索引值从大到小
    best_input=input_domain[best_index,:]      #最大值所在位置的输入
    reco_input=input_domain[reco_index,:]        #10个最佳的输入
    # recommend=reco_input.ctypes.data_as(ctypes.c_double)
    print("best input ", input_domain[best_index, :])
    return input_domain,true_utility,gp_mean,gp_var,datapoints,utility_datapoints,order_index,best_input,reco_input
    # return recommend

if __name__=="__main__":
    import matplotlib.pyplot as plt
    init_list = [[0.1,1.9],[0.35,0.5],[0.5,0.45],[0.61,0.32],[0.90,0.01],[0.8,0.1],[0.55,0.6],[0.6,0.37],[0.14,0.82],[0.05,0.98]]
    # init_list = [[0.8620225780856978, 1.580368795996492], [0.8620225780856978, 1.5801760928938668], [0.8620225780856978, 1.5801760928938668], [0.8611817083407859, 1.5758496755136102], [0.8620225780856978, 1.580368795996492], [0.8962203323488594, 1.6615370222666133], [0.8613437574840875, 1.6056929312382546], [0.8606773038985324, 1.5182641421904677], [0.8620225780856978, 1.5778998201631322], [0.8612639542341483, 1.5821877017939705], [0.8606773038985324, 1.5182641421904677], [0.8652088837739961, 1.6131673666442417], [0.8652088837739961, 1.6131673666442417], [0.8612639542341483, 1.5821877017939705], [0.8613437574840875, 1.6056929312382546], [0.8620504567336865, 1.6162985901976625], [0.8629092178680959, 1.487088984942972], [0.8439112699432592, 1.653136243254654], [0.8424167478690012, 1.6412215531445806], [0.8424167478690012, 1.6412215531445806], [0.8438752541543002, 1.67418444497959], [0.8438752541543002, 1.669583651966587], [0.8438752541543002, 1.67418444497959], [0.8438752541543002, 1.6211849587847473], [0.8438752541543002, 1.6211849587847473], [0.8438752541543002, 1.7011818414838662], [0.8438752541543002, 1.669583651966587], [0.8438752541543002, 1.6727832708360475], [0.8438752541543002, 1.6795864002019698], [0.8438611645332541, 1.518409189143856], [0.8296637136522159, 1.7065095678254567], [0.8438752541543002, 1.6727832708360475], [0.8438752541543002, 1.7003899961664053], [0.7595160082996245, 1.89509246685869], [0.7595160082996245, 1.89509246685869], [0.5924454991642848, 1.839032541404922], [0.7595160082996245, 1.8987554701429106], [0.8438752541543002, 1.729495748584014], [0.5924454991642848, 1.839032541404922], [0.8393205515549252, 2.0127901930485055], [0.7595160082996245, 1.8995507096490147], [0.7595160082996245, 1.8995507096490147], [0.7595160082996245, 1.999918754170427], [0.8393205515549252, 2.0750099334983467], [0.8393205515549252, 2.1239578895309195], [0.7574123319206518, 2.155702337672632], [0.7541550803342864, 2.1768826798580196], [0.7541550803342864, 2.1665824769634416], [0.7541550803342864, 2.1768826798580196], [0.7541550803342864, 2.1665824769634416], [0.5892185474187325, 2.228197047887565], [0.5892185474187325, 2.148030341678777], [0.5892185474187325, 2.148030341678777], [0.5892185474187325, 2.2201707761005847], [0.5892185474187325, 2.2201707761005847], [0.5755311938853174, 2.1847004714956753], [0.5892185474187325, 2.228197047887565], [0.38747354618370833, 2.1016420500939463], [0.38747354618370833, 2.130690385583807], [0.38747354618370833, 2.1241630542017274], [0.4097177684097188, 2.0361961585133983], [0.4097177684097188, 2.0361961585133983], [0.38747354618370833, 2.1016420500939463], [0.2831359341019509, 2.0500799661006877], [0.20187106586990533, 2.125356566968392], [0.20187106586990533, 2.125356566968392], [0.38747354618370833, 2.1241630542017274], [0.38747354618370833, 2.2439243981503867], [0.1969392345019743, 2.0538716244350654], [0.22455532222105914, 2.1610206966756897], [0.1969392345019743, 1.9547072368475262], [0.1969392345019743, 1.9877490974244756], [0.1969392345019743, 1.9642404979189154], [0.1969392345019743, 1.9547072368475262], [0.1969392345019743, 1.9642404979189154], [0.1969392345019743, 2.0524455343966386], [0.1969392345019743, 2.0538716244350654], [0.1969392345019743, 2.0538716244350654], [0.1969392345019743, 2.018666641170209], [0.1969392345019743, 2.0538716244350654], [0.1969392345019743, 1.950615820697479], [0.1969392345019743, 1.950615820697479], [0.12274089845576547, 2.1649205017363715], [0.12274089845576547, 2.3279242632779535], [0.12274089845576547, 2.1649205017363715], [0.12274089845576547, 2.239993733737151], [0.12567982036703032, 2.296370868669107], [0.12567982036703032, 2.309574924824804], [0.12567982036703032, 2.296370868669107], [0.12279098999516047, 2.2938806845877786], [0.12259752266766102, 2.510091073253645], [0.12259752266766102, 2.510091073253645], [0.12259752266766102, 2.7175067349365603], [0.11768582262410014, 2.9073872213601506], [0.11768582262410014, 2.9073872213601506], [0.056789297455010455, 3.605371389467637], [0.056789297455010455, 3.605371389467637], [0.05432082632088519, 2.9923207501318263], [0.05432082632088519, 2.9923207501318263], [0.05432082632088519, 3.675093748991632]]
    # init_list = [[0.86, 1.58],[0.86, 1.58],[0.86, 1.58],[0.86, 1.57],[0.86, 1.58],[0.89, 1.66],[0.86, 1.60]]
    result=ranking(obj_num = 2, query_type = 'ranking',num_queries = 10,seed = 55,input_domain = init_list)
    order_index=result[6]
    # print(result[0].shape,result[1].shape,result[2].shape,result[3].shape,result[4].shape,result[5].shape,result[6].shape,result[7].shape,result[8].shape)
    plt.figure(figsize=(10,5))
    plt.subplot(1,2,1)
    plt.plot(result[0][:,0][order_index],result[2][order_index])
    plt.fill_between(result[0][:,0][order_index],result[2][order_index]-result[3][order_index],result[2][order_index]+result[3][order_index],color='orange',alpha=0.5)
    plt.plot(result[0][:,0][order_index],result[1][order_index],color='r')
    plt.xlabel("f1",fontsize=17)
    plt.subplot(1,2,2)
    plt.plot(result[0][:, 1][order_index], result[2][order_index])
    plt.fill_between(result[0][:, 1][order_index], result[2][order_index] - result[3][order_index],result[2][order_index] + result[3][order_index], color='orange', alpha=0.5)
    plt.plot(result[0][:, 1][order_index], result[1][order_index], color='r')
    plt.xlabel("f2",fontsize=17)
    # plt.savefig("./experiments/plot/utility function f1&f2.png")

    best_index=np.argmax(result[2])
    reco_index=np.argsort(-result[2])[0:10]
    print("recommend 10 best index\n",reco_index)
    print("the best index is ",best_index)
    reco_input=result[0][reco_index,:]
    best_input = result[0][best_index, :]
    print("recommend 10 best input\n",reco_input)
    print("the best input is ",best_input)
    plt.show()
